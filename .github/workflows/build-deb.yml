name: Build Debian Package

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      branch:
        description: "Branch to build from"
        required: false
        default: "main"

jobs:
  build-deb:
    name: Build and Package
    runs-on: ubuntu-latest

    steps:
      # 1) Determine branch name
      - name: Determine branch name
        id: branch
        run: |
          # For manual runs (workflow_dispatch), use the provided input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch }}"
          # For pull_request events, github.head_ref is the source branch (not "refs/...")
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            # For push events, parse branch name from GITHUB_REF (e.g., "refs/heads/main" -> "main")
            BRANCH_NAME="${GITHUB_REF##*/}"
          fi

          # Replace slashes or any other non-alphanumeric characters in the branch name
          SANITIZED_BRANCH=$(echo "$BRANCH_NAME" | tr '/' '_')

          echo "branch_name=$SANITIZED_BRANCH" >> "$GITHUB_ENV"

      # 2) Check out repository (using either the push/PR ref or the manually specified branch)
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.branch || github.ref }}

      # 3) Install required packages
      - name: Install required packages
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential debhelper devscripts lintian

      # 4) Generate version number using GITHUB_RUN_NUMBER + branch
      - name: Increment version number
        id: version
        run: |
          # Read the base version from changelog (if present) or default to 1.0.0
          if [ -f "debian/changelog" ]; then
            BASE_VERSION=$(dpkg-parsechangelog --show-field Version | cut -d'-' -f1)
          else
            BASE_VERSION="1.0.0"
          fi

          # Split the base version into MAJOR, MINOR, (ignore PATCH)
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_VERSION"

          # Pull in the sanitized branch name
          BRANCH_NAME="${{ env.branch_name }}"

          # Incorporate the GitHub Actions run number and the branch name into the version
          # e.g. 1.0.123_main
          NEW_VERSION="${MAJOR}.${MINOR}.${GITHUB_RUN_NUMBER}_${BRANCH_NAME}"

          # Update the changelog with the new version
          export DEBFULLNAME="GitHub Actions"
          export DEBEMAIL="actions@github.com"
          dch --force-distribution -v "$NEW_VERSION" -D "unstable" "Automated build of version $NEW_VERSION"

          # Output the new version number for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      # 5) Build the package
      - name: Build Debian package
        run: |
          dpkg-buildpackage -us -uc -b -d
          mkdir -p build
          mv ../*.deb build/

      # 6) Upload artifact
      - name: Upload Debian package
        uses: actions/upload-artifact@v3
        with:
          # Incorporate the version (which includes the branch name) into the artifact name
          name: wlanpi-usb-ethernet_${{ env.new_version }}
          path: build/*.deb

  slack-workflow-status:
    if: ${{ always() && (github.repository_owner == 'WLAN-Pi') && (! github.event.pull_request.head.repo.fork) }}
    name: Post Workflow Status to Slack
    needs:
      - build-deb
    runs-on: 'ubuntu-22.04'
    steps:
      - name: Slack Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
